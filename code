Code 1: t_car.ino

#include <SD.h>
#include <SPI.h>

const int chipSelect = 4;
const int speed = 255;
const int curving_speed = 20;
String bt_sig;
const int B1_R_PWM = 5;
const int B1_L_PWM = 6;
const int B2_R_PWM = 9; 
const int B2_L_PWM = 10;

void setup() {
    Serial.begin(9600);
    Serial.print("Initializing SD card...");
    SPI.begin();
    SPI.setClockDivider(SPI_CLOCK_DIV8);
    pinMode(SS, OUTPUT);
    if (!SD.begin(chipSelect)) {
        Serial.println("SD card initialization failed!");
        Serial.println("Things to check:");
        Serial.println("* is a card inserted?");
        Serial.println("* is your wiring correct?");
        Serial.println("* did you change the chipSelect pin to match your shield or module?");
        Serial.println("Note: press reset or reopen this serial monitor after fixing your issue!");
        while (1);
    }
    Serial.println("SD card initialization done.");
    if (SD.exists("path.txt")) {
        SD.remove("path.txt");
        Serial.println("Existing path.txt removed");
    }
    File dataFile = SD.open("path.txt", FILE_WRITE);
    if (dataFile) {
        dataFile.println("Movement Log Start");
        dataFile.close();
        Serial.println("New path.txt created");
    }
    pinMode(B1_R_PWM, OUTPUT);
    pinMode(B1_L_PWM, OUTPUT);
    pinMode(B2_R_PWM, OUTPUT);
    pinMode(B2_L_PWM, OUTPUT);
}

void logMovement(const char* movement) {
    File dataFile = SD.open("path.txt", FILE_WRITE);
    if (dataFile) {
        dataFile.println(movement);
        dataFile.close();
    } else {
        Serial.println("Error opening path.txt");
    }
}

void loop() {
    bt_sig = "";
    while(Serial.available()) {
        bt_sig = (char)Serial.read();
    }

    if(bt_sig == "F") {
        forward();
        Serial.println("move forward");
        logMovement("forward");
    }
    else if(bt_sig == "L") {
        turn_left();
        Serial.println("move left");
        logMovement("left");
    }
    else if(bt_sig == "R") {
        turn_right();
        Serial.println("move right");
        logMovement("right");
    }
    else if(bt_sig == "B") {
        backward();
        Serial.println("move back");
        logMovement("backward");
    }
    else if (bt_sig == "S") {
        stop_bot();
        Serial.println("stop");
    }
    else if (bt_sig == "G") {
        Left_forward();
        Serial.println("Fwd left");
    }
    else if (bt_sig == "I") {
        right_forward();
        Serial.println("Fwd Right");
    }
    else if (bt_sig == "H") {
        left_backward();
        Serial.println("Back left");
    }
    else if (bt_sig == "J") {
        right_backward();
        Serial.println("Back right");
    }
    else if(bt_sig == "X") {
        kachra_dance();
        delay(600);
        stop_bot();
        kachra_dance_2();
        Serial.println("Kachra dance");
    }
}

void stop_bot() {
    analogWrite(B1_R_PWM, 0);
    analogWrite(B1_L_PWM, 0);
    analogWrite(B2_R_PWM, 0);
    analogWrite(B2_L_PWM, 0);
}

void forward() {
    analogWrite(B1_R_PWM, speed);
    analogWrite(B1_L_PWM, 0);
    analogWrite(B2_R_PWM, speed);
    analogWrite(B2_L_PWM, 0);
}

void backward() {
    analogWrite(B1_R_PWM, 0);
    analogWrite(B1_L_PWM, speed);
    analogWrite(B2_R_PWM, 0);
    analogWrite(B2_L_PWM, speed);
}

void turn_left() {
    analogWrite(B1_R_PWM, 0);
    analogWrite(B1_L_PWM, speed);
    analogWrite(B2_R_PWM, speed);
    analogWrite(B2_L_PWM, 0);    
}

void turn_right() {
    analogWrite(B1_R_PWM, speed);
    analogWrite(B1_L_PWM, 0);
    analogWrite(B2_R_PWM, 0);
    analogWrite(B2_L_PWM, speed);
}

void Left_forward() {
    analogWrite(B1_R_PWM, curving_speed);
    analogWrite(B1_L_PWM, 0);
    analogWrite(B2_R_PWM, speed);
    analogWrite(B2_L_PWM, 0);  
}

void right_forward() {
    analogWrite(B1_R_PWM, speed);
    analogWrite(B1_L_PWM, 0);
    analogWrite(B2_R_PWM, curving_speed);
    analogWrite(B2_L_PWM, 0);
}

void left_backward() {
    analogWrite(B1_R_PWM, 0);
    analogWrite(B1_L_PWM, curving_speed);
    analogWrite(B2_R_PWM, 0);
    analogWrite(B2_L_PWM, speed);
}

void right_backward() {
    analogWrite(B1_R_PWM, 0);
    analogWrite(B1_L_PWM, speed);
    analogWrite(B2_R_PWM, 0);
    analogWrite(B2_L_PWM, curving_speed);
}

void kachra_dance() {
    analogWrite(B1_R_PWM, 0);
    analogWrite(B1_L_PWM, speed);
    analogWrite(B2_R_PWM, 0);
    analogWrite(B2_L_PWM, 75);
}

void kachra_dance_2() {
    analogWrite(B1_R_PWM, speed);
    analogWrite(B1_L_PWM, 0);
    analogWrite(B2_R_PWM, 0);
    analogWrite(B2_L_PWM, 65);
}



Code 2: t_plot.py

import matplotlib.pyplot as plt
import numpy as np


def read_log_file(filename='path.txt'):
    with open(filename, 'r') as file:
        lines = file.readlines()
        if 'Movement Log Start' in lines[0]:
            movements = [line.strip() for line in lines[1:]]
        else:
            movements = [line.strip() for line in lines]
    return movements


def calculate_trajectory(movements):
    x = 10
    y = 10
    angle = 0
    step = 1
    RIGHT_ANGLE_PER_COMMAND = 90/8
    LEFT_ANGLE_PER_COMMAND = 90/8
    x_coords = [x]
    y_coords = [y]

    for move in movements:
        if move == 'forward':
            x += step * np.cos(np.radians(angle))
            y += step * np.sin(np.radians(angle))
        elif move == 'backward':
            x -= step * np.cos(np.radians(angle))
            y -= step * np.sin(np.radians(angle))
        elif move == 'left':
            angle += LEFT_ANGLE_PER_COMMAND
        elif move == 'right':
            angle -= RIGHT_ANGLE_PER_COMMAND

        x_coords.append(x)
        y_coords.append(y)

    return x_coords, y_coords


def plot_trajectory(x_coords, y_coords):
    plt.figure(figsize=(10, 10))
    plt.plot(x_coords, y_coords, 'b-', linewidth=2, label='Path')
    plt.plot(x_coords[0], y_coords[0], 'go', markersize=15, label='Start')
    plt.plot(x_coords[-1], y_coords[-1], 'ro', markersize=15, label='End')

    for i in range(0, len(x_coords)-1, 5):
        dx = x_coords[i+1] - x_coords[i]
        dy = y_coords[i+1] - y_coords[i]
        if dx != 0 or dy != 0:
            plt.arrow(x_coords[i], y_coords[i], dx*0.2, dy*0.2,
                      head_width=0.1, head_length=0.2, fc='blue', ec='blue')

    plt.grid(True)
    plt.axis('equal')
    plt.title('Robot Trajectory')
    plt.xlabel('X Position')
    plt.ylabel('Y Position')
    plt.legend()
    plt.text(0.02, 0.98, f'Total Movements: {len(x_coords)-1}',
             transform=plt.gca().transAxes, fontsize=10,
             verticalalignment='top')
    plt.show()


def main():
    try:
        movements = read_log_file()
        x_coords, y_coords = calculate_trajectory(movements)
        plot_trajectory(x_coords, y_coords)
        print(f"Total movements: {len(movements)}")
        print(f"Starting position: ({x_coords[0]:.2f}, {y_coords[0]:.2f})")
        print(f"Ending position: ({x_coords[-1]:.2f}, {y_coords[-1]:.2f})")
    except FileNotFoundError:
        print("Error: path.txt file not found!")
    except Exception as e:
        print(f"An error occurred: {str(e)}")


if __name__ == "__main__":
    main()
